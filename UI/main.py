# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
sys.path.insert(1, 'D:/Etude/BSD/TP')
import Vegenere as V
import Cesar as C
import Substitution as S
import Transposition as T
# import DES

from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):

    text=""
    keyword=""
    result=""
    key=0
    alphabet = "abcdefghijklmnopqrstuvwxyz"
    
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(587, 436)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label_message = QtWidgets.QLabel(self.centralwidget)
        self.label_message.setGeometry(QtCore.QRect(20, 130, 81, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_message.setFont(font)
        self.label_message.setLocale(QtCore.QLocale(QtCore.QLocale.English, QtCore.QLocale.UnitedStates))
        self.label_message.setAlignment(QtCore.Qt.AlignCenter)
        self.label_message.setObjectName("label_message")
        self.label_key = QtWidgets.QLabel(self.centralwidget)
        self.label_key.setGeometry(QtCore.QRect(20, 170, 81, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_key.setFont(font)
        self.label_key.setLocale(QtCore.QLocale(QtCore.QLocale.English, QtCore.QLocale.UnitedStates))
        self.label_key.setAlignment(QtCore.Qt.AlignCenter)
        self.label_key.setObjectName("label_key")
        self.label_result = QtWidgets.QLabel(self.centralwidget)
        self.label_result.setGeometry(QtCore.QRect(20, 210, 81, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_result.setFont(font)
        self.label_result.setLocale(QtCore.QLocale(QtCore.QLocale.English, QtCore.QLocale.UnitedStates))
        self.label_result.setAlignment(QtCore.Qt.AlignCenter)
        self.label_result.setObjectName("label_result")
        self.lineEdit_message = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_message.setGeometry(QtCore.QRect(130, 130, 421, 20))
        self.lineEdit_message.setObjectName("lineEdit_message")
        self.lineEdit_key = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_key.setGeometry(QtCore.QRect(130, 170, 421, 20))
        self.lineEdit_key.setObjectName("lineEdit_key")
        self.lineEdit_result = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_result.setGeometry(QtCore.QRect(130, 210, 421, 20))
        self.lineEdit_result.setReadOnly(True)
        self.lineEdit_result.setObjectName("lineEdit_result")
        self.pushButton_Submit = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Submit.setGeometry(QtCore.QRect(260, 260, 75, 23))
        self.pushButton_Submit.setObjectName("pushButton_Submit")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 587, 21))
        self.menubar.setObjectName("menubar")
        self.menuAlgorithms = QtWidgets.QMenu(self.menubar)
        self.menuAlgorithms.setObjectName("menuAlgorithms")
        self.menuBasiques = QtWidgets.QMenu(self.menuAlgorithms)
        self.menuBasiques.setObjectName("menuBasiques")
        self.menuDecryptage = QtWidgets.QMenu(self.menubar)
        self.menuDecryptage.setObjectName("menuDecryptage")
        self.menuBasiques_2 = QtWidgets.QMenu(self.menuDecryptage)
        self.menuBasiques_2.setObjectName("menuBasiques_2")
        self.menuCrack = QtWidgets.QMenu(self.menubar)
        self.menuCrack.setObjectName("menuCrack")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionSymetriques = QtWidgets.QAction(MainWindow)
        self.actionSymetriques.setObjectName("actionSymetriques")
        self.actionSym_triques_2 = QtWidgets.QAction(MainWindow)
        self.actionSym_triques_2.setObjectName("actionSym_triques_2")
        self.actionAsym_triques = QtWidgets.QAction(MainWindow)
        self.actionAsym_triques.setObjectName("actionAsym_triques")
        self.actionAsymetriques = QtWidgets.QAction(MainWindow)
        self.actionAsymetriques.setObjectName("actionAsymetriques")
        self.actionBasiques_2 = QtWidgets.QAction(MainWindow)
        self.actionBasiques_2.setObjectName("actionBasiques_2")
        self.actionSym_triques_3 = QtWidgets.QAction(MainWindow)
        self.actionSym_triques_3.setObjectName("actionSym_triques_3")
        self.actionAsym_triques_3 = QtWidgets.QAction(MainWindow)
        self.actionAsym_triques_3.setObjectName("actionAsym_triques_3")
        self.actionCesar = QtWidgets.QAction(MainWindow)
        self.actionCesar.setObjectName("actionCesar")
        self.actionVegenere = QtWidgets.QAction(MainWindow)
        self.actionVegenere.setObjectName("actionVegenere")
        self.actionSubstitution = QtWidgets.QAction(MainWindow)
        self.actionSubstitution.setObjectName("actionSubstitution")
        self.actionTransposition = QtWidgets.QAction(MainWindow)
        self.actionTransposition.setObjectName("actionTransposition")
        self.actionC_sar_2 = QtWidgets.QAction(MainWindow)
        self.actionC_sar_2.setObjectName("actionC_sar_2")
        self.actionVegen_re_2 = QtWidgets.QAction(MainWindow)
        self.actionVegen_re_2.setObjectName("actionVegen_re_2")
        self.actionSubstitution_2 = QtWidgets.QAction(MainWindow)
        self.actionSubstitution_2.setObjectName("actionSubstitution_2")
        self.actionTransposition_2 = QtWidgets.QAction(MainWindow)
        self.actionTransposition_2.setObjectName("actionTransposition_2")
        self.menuBasiques.addAction(self.actionCesar)
        self.menuBasiques.addAction(self.actionVegenere)
        self.menuBasiques.addAction(self.actionSubstitution)
        self.menuBasiques.addAction(self.actionTransposition)
        self.menuAlgorithms.addAction(self.menuBasiques.menuAction())
        self.menuAlgorithms.addSeparator()
        self.menuAlgorithms.addAction(self.actionSymetriques)
        self.menuAlgorithms.addSeparator()
        self.menuAlgorithms.addAction(self.actionAsymetriques)
        self.menuBasiques_2.addAction(self.actionC_sar_2)
        self.menuBasiques_2.addAction(self.actionVegen_re_2)
        self.menuBasiques_2.addAction(self.actionSubstitution_2)
        self.menuBasiques_2.addAction(self.actionTransposition_2)
        self.menuDecryptage.addAction(self.menuBasiques_2.menuAction())
        self.menuDecryptage.addSeparator()
        self.menuDecryptage.addAction(self.actionSym_triques_2)
        self.menuDecryptage.addSeparator()
        self.menuDecryptage.addAction(self.actionAsym_triques)
        self.menuCrack.addAction(self.actionBasiques_2)
        self.menuCrack.addSeparator()
        self.menuCrack.addAction(self.actionSym_triques_3)
        self.menuCrack.addSeparator()
        self.menuCrack.addAction(self.actionAsym_triques_3)
        self.menubar.addAction(self.menuAlgorithms.menuAction())
        self.menubar.addAction(self.menuDecryptage.menuAction())
        self.menubar.addAction(self.menuCrack.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))

        self.label_message.setText(_translate("MainWindow", "Message"))
        self.label_key.setText(_translate("MainWindow", "Clé"))
        self.label_result.setText(_translate("MainWindow", "Résultat"))

        self.pushButton_Submit.clicked.connect(lambda: self.sub_dec())
        self.pushButton_Submit.setText(_translate("MainWindow", "Submit"))

        self.menuAlgorithms.setTitle(_translate("MainWindow", "Cryptage"))
        self.menuBasiques.setTitle(_translate("MainWindow", "Basiques"))
        self.menuDecryptage.setTitle(_translate("MainWindow", "Décryptage"))
        self.menuBasiques_2.setTitle(_translate("MainWindow", "Basiques"))
        self.menuCrack.setTitle(_translate("MainWindow", "Crack"))
        self.actionSymetriques.setText(_translate("MainWindow", "Symétriques"))
        self.actionSym_triques_2.setText(_translate("MainWindow", "Symétriques"))
        self.actionAsym_triques.setText(_translate("MainWindow", "Asymétriques"))
        self.actionAsymetriques.setText(_translate("MainWindow", "Asymétriques"))
        self.actionBasiques_2.setText(_translate("MainWindow", "Basiques"))
        self.actionSym_triques_3.setText(_translate("MainWindow", "Symétriques"))
        self.actionAsym_triques_3.setText(_translate("MainWindow", "Asymétriques"))
        self.actionCesar.setText(_translate("MainWindow", "César"))
        self.actionVegenere.setText(_translate("MainWindow", "Vegenère"))
        self.actionSubstitution.setText(_translate("MainWindow", "Substitution"))
        self.actionTransposition.setText(_translate("MainWindow", "Transposition"))
        self.actionC_sar_2.setText(_translate("MainWindow", "César"))
        self.actionVegen_re_2.setText(_translate("MainWindow", "Vegenère"))
        self.actionSubstitution_2.setText(_translate("MainWindow", "Substitution"))
        self.actionTransposition_2.setText(_translate("MainWindow", "Transposition"))

        self.actionCesar.triggered.connect(self.cesar_enc)
        self.actionVegenere.triggered.connect(self.veg_enc)
        self.actionSubstitution.triggered.connect(self.sub_enc)
        self.actionTransposition.triggered.connect(self.trans_enc)

        self.actionC_sar_2.triggered.connect(self.cesar_dec)
        self.actionVegen_re_2.triggered.connect(self.veg_dec)
        self.actionSubstitution_2.triggered.connect(self.sub_dec)

        # self.onlyInt = QtGui.QIntValidator()
        # self.lineEdit_key.setValidator(self.onlyInt)

    def veg_enc(self):
        
        self.text = self.lineEdit_message.text()
        self.keyword = self.lineEdit_key.text()
        print(self.text+"\n")
        print(self.keyword+"\n")
        self.text=self.text.split()
        self.text="".join(self.text)
        key= V.generateKey(self.text,self.keyword)
        encrypted=V.encrypt_veg(self.text,key)
        self.lineEdit_result.setText(encrypted)

    def cesar_enc(self):

        self.text = self.lineEdit_message.text()
        self.key = int(self.lineEdit_key.text())
        print(self.text+"\n")
        print(str(self.key)+"\n")
        encrypted=C.encrypt(self.text,self.key)
        self.lineEdit_result.setText(encrypted)

    def sub_enc(self):
        self.text = self.lineEdit_message.text()
        self.key = self.lineEdit_key.text()
        print(self.text+"\n")
        print(self.keyword+"\n")
        encrypted=S.encrypt_sub(self.text,self.key,self.alphabet)
        self.lineEdit_result.setText(encrypted)
    
    def trans_enc(self):

        self.text = self.lineEdit_message.text()
        self.key = int(self.lineEdit_key.text())
        print(self.text+"\n")
        print(str(self.key)+"\n")
        encrypted=T.encrypt_trans(self.text,self.key)
        self.lineEdit_result.setText(encrypted)

    def cesar_dec(self):
        self.text = self.lineEdit_message.text()
        self.key = int(self.lineEdit_key.text())
        print(self.text+"\n")
        print(str(self.key)+"\n")
        decrypted=C.decrypt(self.text,self.key)
        self.lineEdit_result.setText(decrypted)

    def veg_dec(self):
        self.text = self.lineEdit_message.text()
        self.keyword = self.lineEdit_key.text()
        print(self.text+"\n")
        print(str(self.key)+"\n")
        key=V.generateKey(self.text,self.keyword)
        decrypted=V.decrypt_veg(self.text,key)
        self.lineEdit_result.setText(decrypted)

    def sub_dec(self):
        self.text = self.lineEdit_message.text()
        self.key = self.lineEdit_key.text()
        print(self.text+"\n")
        print(self.keyword+"\n")
        encrypted=S.decrypt_sub(self.text,self.key,self.alphabet)
        self.lineEdit_result.setText(encrypted)

    def trans_dec(self):
        pass

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
